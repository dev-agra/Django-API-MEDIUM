ARG PYTHON_VERSION=3.8-bullseye
# multistage build

# building wheels stage
FROM python:${PYTHON_VERSION} as python

FROM python as python-build-stage
ARG BUILD_ENVIRONMENT=local

RUN apk update && apk add --no-install-recommends -y \
    build-essential \
    libpq-dev
    
COPY ./requirements .

# directory where thee wheel is present further we move the wheels to run-stage
RUN pip wheel --wheel-dir /usr/src/app/wheels \
    -r ${BUILD_ENVIRONMENT}.txt
    

# now the python run stage
FROM python as python-run-stage
ARG BUILD_ENVIRONMENT=local

# location where or application be stored on docker container
ARG APP_HOME=/app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONBUFFERED 1
ENV BUILD_ENV ${BUILD_ENVIRONMENT}

WORKDIR ${APP_HOME}

RUN apt-get update && apt-get-install --no-install-recommends -y \
    libpq-dev \
    gettext \
    # rremoves unecessary packages and cleans up the package cache
    # purge -> application with config files
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
    # removes package index file no longer needed after build dependency stage
    && rm -rf /var/lib/apt/list/*
    
COPY --from=python-build-stage /usr/src/app/wheels /wheels/

# using wheels to install dependencies
# using pip
# --no-index -> dont search python package index pypi when searching packages
# find-links -> search package within the local syste, and not the global online search
RUN pip install --no-cache-dir --no-index --find-links=/wheels/ /wheels/* \
    && rm -rf /wheels/
    
COPY ./docker/local/django/entrypoint /entrypoint
# so that entrypoint has a custom ending rather windows style line ending
# using windows can cause issues
RUN sed -i 's/\r$//g' /entrypoint
# so entrypoint can be executed as a script/program in the docker image
RUN chmod +x /entrypoint

COPY ./docker/local/django/start /start
# so that entrypoint has a custom ending rather windows style line ending
# using windows can cause issues
RUN sed -i 's/\r$//g' /start
# so entrypoint can be executed as a script/program in the docker image
RUN chmod +x /start

# . -> current directory, destination is the working directory
COPY . $(APP_HOME)

ENTRYPOINT [ "/entrypoint" ]


# => Nginx
-> webserver and load balancer and reverse proxy
-> sits in front of web servers and encrypt/redirect the traffic
-> request made to this rather than direct app
-> man in middle type
-> encrypt/decrypt done at Nginx
-> scailng vertical -> adding more power
-> scaling horizontally -> adding more containers/machines [scaling out]

hoizontal -> request distributed to machines so nginx acts as load balancer
routs client request to machines capable of fulfilling the request
Round Robin used

we'll use Path Based Load Balancer
-> look at request and figure out which backend/frontend will be suitable

currently Django 4+ is async able with ASGI requests but it has performance penalties and problem running efficient long running requests

Asynchronous -> events/processes can independently execute without blocking 		each other's execution
	     -> tasks can be initiated without waiting for a previous task 		to complete, run concurrently without affecting the overall 		outcome
	     -> parallel processing-> web or networking
 
Synchronous-> events/processes in sequential manner one after the other
	   -> single threaded applications
	-> can lead to unresponsive UI's and delays for complex 	 	   applicatiions when apps wait for external inputs or perform 	  	   heavy computing

so we use Celery for asynchronous programming
-> it needs message broker and result backend

1) Message Broker
-> Intermediary program used as transport for producing/consuming tasks

2) Result Backend
-> used to store result of a celery task

we use Redis for both purposes 
-> Redis is in memory data structure store that can be used as database, cache, memory, msg broker

We use Flower to monitor, manage app API with Celery and celery email to send async emails

We develop a signal so that the profile is created whenever a user is created
-> signals are efficient ways to get work done and comms btwn two apps without having to know each other
